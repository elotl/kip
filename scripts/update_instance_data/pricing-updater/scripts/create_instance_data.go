package main

import (
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"
)

const instanceDataOutputDirPath =  "pkg/util/instanceselector/"

var topDir = os.Getenv("TOP_KIP_DIR")

// Reads all .json files in the current folder
// and encodes them as strings literals in kip/pkg/util/instanceselector/instance_data.go

// Hopefully we will get rid of this scripts once go start supporting embedding files natively
func main() {
	if topDir == "" {
		panic("please set TOP_KIP_DIR env var")
	}
	outputAbsolutePath := filepath.Join(topDir, instanceDataOutputDirPath)
	sourceDir := filepath.Join(topDir, "scripts/update_instance_data/pricing-updater")
	fs, _ := ioutil.ReadDir(sourceDir)
	currentWorkingDirectory, _ := os.Getwd()
	fmt.Printf("current dir: %s\n", currentWorkingDirectory)
	for _, f := range fs {
		if !strings.HasSuffix(f.Name(), "InstanceJson.json") {
			fmt.Printf("skipping %s\n", f.Name())
			continue
		}
		fmt.Printf("reading %s\n", f.Name())
		sourcePath := filepath.Join(sourceDir, f.Name())
		provider := ""
		if strings.HasPrefix(f.Name(), "aws") {
			provider = "aws"
		} else if strings.HasPrefix(f.Name(), "gce") {
			provider = "gce"
		} else if strings.HasPrefix(f.Name(), "azure") {
			provider = "azure"
		}
		if provider == "" {
			continue
		}
		varName := strings.TrimSuffix(f.Name(), ".json")
		writeProviderData(provider, outputAbsolutePath, sourcePath, varName)
	}

}

func writeProviderData(provider, outputDir, sourcePath, varName string)  {
	filename := fmt.Sprintf("%s_instance_data.go", provider)
	outputAbsolutePath := filepath.Join(outputDir, filename)
	err := os.Remove(outputAbsolutePath)
	if err != nil {
		panic(err)
	}
	out, err := os.Create(outputAbsolutePath)
	if err != nil {
		log.Fatal(err)
	}
	_, err = out.Write([]byte("package instanceselector \n\n//PLEASE DON'T EDIT THIS FILE, IT IS AUTOGENERATED USING make update-pricing-data\nconst (\n"))
	if err != nil {
		panic(err)
	}
	out.Write([]byte("    " + varName + " = `"))
	source, err := os.Open(sourcePath)
	if err != nil {
		log.Fatal(err)
	}
	io.Copy(out, source)
	out.Write([]byte("`\n"))
	out.Write([]byte(")\n"))
	fmt.Printf("saving %s\n", out.Name())
	out.Close()
}